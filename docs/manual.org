* Manual-like thingy for Zenfinger

(very early draft; subject to change)

** Configuration

Zenfinger uses the kind of INI file that can be correctly parsed by [[https://nim-lang.org/docs/parsecfg.html][Nim's built-in parser]].

A sample config file:

#+begin_src ini
  ; All paths are absolute paths unless specified otherwise.

  [finger]
  ; This option sets the address the Finger server is going to bind to. If
  ; you're planning to do port forwarding, you might want to set this
  ; option to 127.0.0.1 so that the port chosen above won't get exposed.
  address=0.0.0.0

  ; The port the Finger server is going to bind to.
  ; Finger protocol runs on port 79, but some operating systems
  ; does not allow a normal user to open up port 1 ~ 1024 without
  ; administrator priviledge; yet it's also kind of a security concern to
  ; run this software with priviledged user. So - are you planning to run
  ; this server with a normal user and have port forwarding set up
  ; elsewhere (e.g. you're running this with Docker or Unikraft or other
  ; kind of encapsulation)? If yes, then pick the port number this server
  ; is going to bind to.
  port=79

  [content]
  ; The path to the "home page" file of the server. Displayed on empty
  ; queries, which were originally meant to list all users.
  homepage_path=...

  ; The base directory for storing the content from the users.
  base_dir=...

  ; The base directory for storing the users' passwords. The users'
  ; passwords are stored in text files that contains the password hashes
  ; in this directory; they are used to edit one's content from the HTTP
  ; frontend.
  password_dir=...

  [http]
  ; The address and port the HTTP server will bind to.
  port=4079
  address=127.0.0.1

  ; The directory for static assets that might get used in the HTTP
  ; frontend (e.g. stylesheets).
  static_assets_dir=...

  ; This option is to determine the site name used for the HTTP proxy.
  ; Appears in a few places (e.g. the index page for the HTTP proxy).
  site_name="A Zenfinger server"

  [admin]
  ; The password for the administrator of this server. Used to edit this
  ; very configuration and other things.
  password="$2b$08$...."
#+end_src

** Server requests

A few requests are reserved and cannot be used as user name:

+ =_random=: Randomly picks a user and respond as if the client requested for their profile.

** User directory

When a new user is created, the following directory structure is created in the base directory specified in the config file:

#+begin_example
+ [base dir]
  + [username]
    + main
    + contact
    + project
    + plan
#+end_example

The usage of these four files is as follows:

+ =main=: The "main" file. Used for self-introduction and similar things.
+ =contact=: Your contact info, if you choose to share them.
+ =project=: The projects you're working on or have finished
+ =plan=: Your plan, if you choose to share them.

The user can choose to host their PGP public key; the key file would be named =pgp_pubkey= and the signature would reside in a separate file named =pgp_pubkey.sig=. These two files reside in the same directory as the above.

Files under a user's directory can be accessed using the requests "[username]/[filename]" or "[username]?[filename]", e.g. to get the =contact= file of user =sztl= on the server =finger.pub=, the URL would be =finger://finger.pub/sztl/contact= or =finger://finger.pub/sztl?contact=.

If a request only contains the user name (e.g. for the user =sztl= instead of =sztl/main= or =sztl/plan= it's just =sztl=), a combination of the content from the files are returned in this manner:

+ The content of =[username]/main=;
+ An empty line;
+ The content of =[username]/contact=;
+ An empty line;
+ If =[username]/pgp_pubkey= exists, then the string: =PGP public key: [username]/pgp_pubkey=;
+ If =[username]/pgp_pubkey.sig= exists, then the string =Fingerprint:=, a space, and the content of the =pgp_pubkey.sig= file.
+ If =[username]/project= exists and is not empty, then the content of it;
+ If =[username]/plan= exists and is not empty, then the content of it;

Of course, some people would want to customize that themselves. Zenfinger also allows that too. If a =profile= file exists under a user's directory, then the content of that file would be returned when the client query the username instead of the mess above.


